/*
 * Todo API
 *
 * A simple Todo API
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"net/http"
	"strconv"
	"sync"

	"github.com/gorilla/mux"
	"github.com/sirupsen/logrus"
	"golang.org/x/exp/slices"
)

func init() {
	logrus.SetFormatter(&logrus.JSONFormatter{})
}

var todos = []TodoResponse{}
var lock = &sync.Mutex{}

var lastId = 0

func getUserId(r *http.Request) string {
	return mux.Vars(r)["userId"]
}

func getTodoId(r *http.Request) (int32, error) {
	id := mux.Vars(r)["id"]
	v, err := strconv.Atoi(id)
	if err != nil {
		return 0, err
	}
	return int32(v), nil
}

func UsersUserIdTodosGet(w http.ResponseWriter, r *http.Request) {
	lock.Lock()
	defer lock.Unlock()
	// read the request data
	userId := getUserId(r)
	logRequest(r, "UsersUserIdTodosGet", nil)
	// process the request
	userTodos := []TodoResponse{}
	for _, todo := range todos {
		if todo.UserId == userId {
			userTodos = append(userTodos, todo)
		}
	}
	// if len(userTodos) == 0 {
	// 	userTodos = makeSampleTodos(userId)
	// 	todos = append(todos, userTodos...)
	// }
	// write the response
	writeJSONResponse("UsersUserIdTodosGet", r, w, userTodos, http.StatusOK)
}

func UsersUserIdTodosIdDelete(w http.ResponseWriter, r *http.Request) {
	lock.Lock()
	defer lock.Unlock()
	// read the request data
	userId := getUserId(r)
	todoId, err := getTodoId(r)
	if err != nil {
		logRequest(r, "UsersUserIdTodosIdDelete", nil)
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	logRequest(r, "UsersUserIdTodosIdDelete", nil)
	// process the request
	idx := slices.IndexFunc(todos, func(todo TodoResponse) bool {
		return todo.Id == todoId && todo.UserId == userId
	})
	if idx == -1 {
		writeErrorResponse("UsersUserIdTodosIdDelete", r, w, http.StatusNotFound, "Not found")
		return
	}
	todos = append(todos[:idx], todos[idx+1:]...)
	// write the response
	writeJSONResponse("UsersUserIdTodosIdDelete", r, w, nil, http.StatusOK)
}

func UsersUserIdTodosIdGet(w http.ResponseWriter, r *http.Request) {
	lock.Lock()
	defer lock.Unlock()
	// read the request data
	userId := getUserId(r)
	todoId, err := getTodoId(r)
	if err != nil {
		logRequest(r, "UsersUserIdTodosIdGet", nil)
		writeErrorResponse("UsersUserIdTodosIdGet", r, w, http.StatusBadRequest, "Invalid todo id")
		return
	}
	logRequest(r, "UsersUserIdTodosIdGet", nil)
	// process the request
	idx := slices.IndexFunc(todos, func(todo TodoResponse) bool {
		return todo.Id == todoId && todo.UserId == userId
	})
	if idx == -1 {
		writeErrorResponse("UsersUserIdTodosIdGet", r, w, http.StatusNotFound, "Not found")
		return
	}
	// write the response
	writeJSONResponse("UsersUserIdTodosIdGet", r, w, todos[idx], http.StatusOK)
}

func UsersUserIdTodosIdPut(w http.ResponseWriter, r *http.Request) {
	lock.Lock()
	defer lock.Unlock()
	// read the request data
	userId := getUserId(r)
	todoId, err := getTodoId(r)
	if err != nil {
		logRequest(r, "UsersUserIdTodosIdPut", nil)
		writeErrorResponse("UsersUserIdTodosIdPut", r, w, http.StatusBadRequest, "Invalid todo id")
		return
	}
	var update TodoResponse
	if err := json.NewDecoder(r.Body).Decode(&update); err != nil {
		logRequest(r, "UsersUserIdTodosIdPut", nil)
		writeErrorResponse("UsersUserIdTodosIdPut", r, w, http.StatusBadRequest, "Invalid request")
		return
	}
	logRequest(r, "UsersUserIdTodosIdPut", update)
	// process the request
	idx := slices.IndexFunc(todos, func(todo TodoResponse) bool {
		return todo.Id == todoId && todo.UserId == userId
	})
	if idx == -1 {
		writeErrorResponse("UsersUserIdTodosIdPut", r, w, http.StatusNotFound, "Not found")
		return
	}
	todos[idx].Title = update.Title
	todos[idx].Description = update.Description
	todos[idx].Completed = update.Completed
	// write the response
	writeJSONResponse("UsersUserIdTodosIdPut", r, w, todos[idx], http.StatusOK)
}

func UsersUserIdTodosPost(w http.ResponseWriter, r *http.Request) {
	lock.Lock()
	defer lock.Unlock()
	// read the request data
	userId := getUserId(r)
	var body TodoRequest
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		logRequest(r, "UsersUserIdTodosPost", nil)
		writeErrorResponse("UsersUserIdTodosPost", r, w, http.StatusBadRequest, "Invalid request")
		return
	}
	logRequest(r, "UsersUserIdTodosPost", body)
	// process the request
	todo := TodoResponse{}
	todo.UserId = userId
	todo.Id = int32(lastId + 1)
	todo.Title = body.Title
	todo.Description = body.Description
	lastId++
	todos = append(todos, todo)
	// write the response
	writeJSONResponse("UsersUserIdTodosPost", r, w, todo, http.StatusCreated)
}
